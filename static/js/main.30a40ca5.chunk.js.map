{"version":3,"sources":["components/Nav.js","actions/index.js","components/ToDoList.js","components/ToDoLists.js","containers/appendList.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["Nav","props","state","id","completed","date","onsubmit","bind","this","text","value","trim","length","alert","Date","toLocaleDateString","substring","store","dispatch","type","list","setState","prev","setInterval","time","toLocaleTimeString","weekday","getDay","ref","input","placeholder","onClick","React","Component","ToDoList","checkComplete","deleteList","button","buttonMouseOver","buttonMouseOut","idValue","className","style","textDecorationLine","onChange","onMouseOver","onMouseOut","ToDoLists","lists","map","el","key","connect","appendList","App","Boolean","window","location","hostname","match","initialState","combineReducers","action","Object","assign","concat","arr","filter","parseInt","console","log","array","splice","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.30a40ca5.chunk.js","sourcesContent":["import React from 'react'\nimport './Nav.css'\nimport { appendList } from '../actions'\nimport { store } from '../index'\n\nclass Nav extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: 0,\n            completed: false,\n            date: null\n        }\n        this.onsubmit = this.onsubmit.bind(this);\n    }\n    onsubmit() {\n        if (this.text.value.trim().length === 0) {\n            alert('Must write some text on input field');\n        } else {\n            let date = new Date().toLocaleDateString();\n            date = date.substring(0, date.length - 1);\n            store.dispatch(appendList([this.state.id, date, this.text.value, this.state.completed]))\n            this.text.value = '';\n            this.setState(prev => ({ id: prev.id++ }));\n        }\n\n    }\n    componentDidMount() {\n        setInterval(() => {\n            let date = new Date().toLocaleDateString();\n            date = date.substring(0, date.length - 1);\n            let time = new Date().toLocaleTimeString();\n            let weeklist = [null, '월', '화', '수', '목', '금', '토', '일'];\n            let weekday = new Date().getDay();\n            this.setState({ date: `${date} / ${time} (${weeklist[weekday]})` })\n        }, 10);\n    }\n\n    render() {\n        return (\n            <>\n                {this.state.date ? (<div id=\"clockPart\">{this.state.date}</div>)\n                    :\n                    (<div id=\"clockPart\">Loading...</div>)}\n                <div id=\"inputArea\">\n                    <input ref={(input) => { this.text = input }} placeholder=\"write your ToDoList\" type=\"text\"></input>\n                    <button onClick={this.onsubmit}>등록</button>\n                </div>\n            </>\n        )\n    }\n}\n\nexport default Nav;","\n\nexport const appendList = (list) => ({\n    type: \"APPEND_TODO_LIST\",\n    list,\n})\n\nexport const deleteList = (id) => ({\n    type: \"DELETE_TODO_LIST\",\n    id,\n});\n\nexport const completedList = (id) => ({\n    type: \"COMPLETE_TODO_LIST\",\n    id,\n});\n\n","import React from 'react';\nimport { store } from '../index';\nimport './ToDoList.css'\nimport { completedList, deleteList } from '../actions';\n\nclass ToDoList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.checkComplete = this.checkComplete.bind(this);\n        this.deleteList = this.deleteList.bind(this);\n        this.state = {\n            button: '포기'\n        }\n        this.buttonMouseOver = this.buttonMouseOver.bind(this);\n        this.buttonMouseOut = this.buttonMouseOut.bind(this);\n    }\n    checkComplete() {\n        store.dispatch(completedList(this.idValue.value));\n    }\n\n    deleteList() {\n        store.dispatch(deleteList(this.idValue.value));\n    }\n\n    buttonMouseOver() {\n        this.setState({ button: '포기하지 말자!' });\n    }\n\n    buttonMouseOut() {\n        this.setState({ button: '포기' });\n    }\n\n    render() {\n        const { id, date, text, completed } = this.props;\n        return (\n            <>\n                <div className=\"list\">\n                    <div id=\"date\">{date}</div>\n                    <div id=\"text\" style={completed ? { textDecorationLine: 'line-through' } : {}}>{text.length <= 15 ? text : `${text.substring(0, 16)}...`}</div>\n                    <input id=\"checkbox\" type=\"checkbox\" onChange={this.checkComplete}></input>\n                    <input type=\"hidden\" value={id} ref={(input) => { this.idValue = input }} />\n                    <button onMouseOver={this.buttonMouseOver} onMouseOut={this.buttonMouseOut} onClick={this.deleteList}>{this.state.button}</button>\n                </div>\n            </>\n        );\n    }\n\n\n}\n\nexport default ToDoList;","\nimport React from 'react';\nimport ToDoList from './ToDoList';\nimport './ToDoLists.css';\n\nfunction ToDoLists(props) {\n    return (\n        <>\n            <div className=\"lists\">\n                {props.lists.map(el => {\n                    return <ToDoList key={el[0]} id={el[0]} date={el[1]} text={el[2]} completed={el[3]} />\n                })}\n            </div>\n        </>\n    );\n}\n\nexport default ToDoLists;","import { connect } from 'react-redux'\nimport ToDoLists from '../components/ToDoLists'\n\nconst mapStateToProps = (state) => ({\n    lists: state.appendList.list\n});\n\nexport default connect(mapStateToProps)(ToDoLists)","import React from 'react';\r\nimport './App.css';\r\nimport Nav from './components/Nav';\r\nimport ToDoLists from './containers/appendList'\r\n\r\nclass App extends React.Component {\r\n  // eslint-disable-next-line\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      id: 0,\r\n      completed: false,\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"Nav\">\r\n          <Nav />\r\n        </div>\r\n        <ToDoLists />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\n\nconst initialState = {\n    list: []\n}\n\nconst appendList = (state = initialState, action) => {\n    switch (action.type) {\n        case \"APPEND_TODO_LIST\":\n            return Object.assign({}, { list: state.list.concat([action.list]) });\n        case \"DELETE_TODO_LIST\":\n            let arr = state.list;\n            arr = arr.filter(el => {\n                return el[0] !== parseInt(action.id);\n            })\n            console.log(arr);\n            return Object.assign({}, state, { list: arr });\n        case \"COMPLETE_TODO_LIST\":\n            let array = state.list;\n            array = array.map(el => {\n                if (el[0] === parseInt(action.id)) {\n                    if (el[3] === false) {\n                        el.splice(3, 1, true);\n                    } else {\n                        el.splice(3, 1, false);\n                    }\n                    return el;\n                } else {\n                    return el;\n                }\n            })\n            return Object.assign({}, { list: array });\n        default:\n            return state;\n    }\n\n};\n\nexport default combineReducers({\n    appendList\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore } from 'redux'\r\nimport rootReducer from './reducers'\r\nexport const store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}